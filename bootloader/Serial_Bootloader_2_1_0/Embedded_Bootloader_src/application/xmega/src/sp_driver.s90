/**************************************************************************//**
  \file  sp_driver.s90

  \brief Implementation of self programming functions.

  \author
      Atmel Corporation: http://www.atmel.com \n
      Support email: avr@atmel.com

    Copyright (c) 2008, Atmel Corporation. All rights reserved.
    Licensed under Atmel's Limited License Agreement (BitCloudTM).

  \internal
    History:
      28/07/10 A. Khromykh - Created
*******************************************************************************/
/**************************************************************************//**
\internal
           Note on IAR calling convention:
           Scratch registers:   R0-R3, R16-R23, R30-R31
           Preserved registers: R4-R15, R24-R27
           Parameter registers: R16-R23 (1-, 2- or 4-byte alignment)
           Return registers:    R16-R19
*******************************************************************************/
/******************************************************************************
                   Define(s) section
******************************************************************************/
RAMPZ                           VAR    0x003B         ; RAMPZ address
NVM_CMD_LOAD_FLASH_BUFFER_gc    VAR    0x23           ; Load Flash page buffer
NVM_CMD_ERASE_WRITE_APP_PAGE_gc VAR    0x25           ; Erase-and-write Application Section page
NVM_CMD                         VAR    0x01CA         ; Address of NVM CMD register
NVM_INTCTRL                     VAR    0x01CD         ; Address of NVM INTCTRL register
NVM_STATUS                      VAR    0x01CF         ; Address of NVM STATUS register
CCP_SPM_gc                      VAR    0x9D           ; SPM Instruction Protection
CCP                             VAR    0x0034         ; CCP address
NVM_NVMBUSY_bp                  VAR    7              ; bit position BUSY into STATUS register
SLEEP_SEN_bm                    VAR    0x01           ; sleep enable bit mask
SLEEP_CTRL                      VAR    0x0048         ; sleep CTRL register
NVM_SPMLVL_HI_gc                VAR    0x0C           ; enable high level spm interrupt

/******************************************************************************
                    Implementation section
******************************************************************************/
/**************************************************************************//**
\brief This routine writes the word from R19:R18 into the Flash page buffer at
 address R17:R16.

\param
     R17:R16 - Byte address into Flash page.
     R19:R18 - Word to write.

\return
     Nothing.
******************************************************************************/
PUBLIC SP_LoadFlashWord
RSEG CODE
SP_LoadFlashWord:
    push    r20
    push    r0
    push    r1
    push    r31
    push    r30
    movw    r1:r0, r19:r18                     ; Prepare flash word in R1:R0.
    ldi     r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
    movw    r31:r30, r17:r16                   ; Load R17:R16 into Z(R31:R30).
    sts     NVM_CMD, r20                       ; Load prepared command into NVM Command register.
    ldi     r20, CCP_SPM_gc                    ; Prepare Protect SPM signature in R20
    sts     CCP, r20                           ; Enable SPM operation (this disables interrupts for 4 cycles).
    spm                                        ; Self-program.
  waitForSPM:
    lds     r20, NVM_STATUS                    ; Load the NVM Status register.
    sbrc    r20, NVM_NVMBUSY_bp                ; Check if bit is cleared.
    rjmp    waitForSPM                         ; Repeat check if bit is not cleared.
    clr     r20                                ; Clear r20
    sts     NVM_CMD, r20                       ; Clear up command register to NO_OPERATION.
    pop     r30
    pop     r31
    pop     r1
    pop     r0
    pop     r20
    ret

/**************************************************************************//**
\brief This routine erases first and then writes the page buffer to the
 Flash page at address R19:R18:R17:R16 in the application section. The address
 can point anywhere inside the page.

\param
     R19:R18:R17:R16 - Byte address into Flash page.

\retrun
     Nothing.
******************************************************************************/
PUBLIC SP_EraseWriteApplicationPage
RSEG CODE
SP_EraseWriteApplicationPage:
    push    r22
    push    r21
    push    r20
    push    r31
    push    r30
    in      r22, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
    out     RAMPZ, r18                            ; Load RAMPZ with the MSB of the address.
    movw    r31:r30, r17:r16                      ; Move low bytes of address to ZH:ZL from R17:R16
    ldi     r20, SLEEP_SEN_bm                     ; Prepare sleep enable & IDLE mode in R20.
    sts     SLEEP_CTRL, r20                       ; load sleep enable and sleep mode to CTRL
    ldi     r21, NVM_SPMLVL_HI_gc                 ; Prepare high level spm interrupt
    ldi     r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
    sts     NVM_CMD, r20                          ; Load prepared command into NVM Command register.
    ldi     r20, CCP_SPM_gc                       ; Prepare Protect SPM signature in R20
    sts     CCP, r20                              ; Enable SPM operation (this disables interrupts for 4 cycles).
    spm                                           ; Self-program.
    sts     NVM_INTCTRL, r21                      ; Enable spm interrupt
    sleep                                         ; Sleep
    clr     r21                                   ; Clear r21
    sts     SLEEP_CTRL, r21                       ; Clear sleep control register
    out     RAMPZ, r22                            ; Restore RAMPZ register.
    pop     r30
    pop     r31
    pop     r20
    pop     r21
    pop     r22
    ret

END

; END OF FILE

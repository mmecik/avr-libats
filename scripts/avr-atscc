#!/usr/bin/perl -w

#
# A script that wraps around atsopt and avr-gcc, mainly
# to simplify writing AVR code in ATS.
#
# Author Will Blair - wdblair AT bu DOT edu

@atsopt_flags = ();
@cflags = ();

#The ATS source files we're working with
@files = ();

#Whether or not we're just typechecking the file
my $typecheck = 0;

#Record the object file we're generating
my $output_filename = "a.out";

#Whether or not to make a hex file.
my $hex = 0;

#Read the input from stdin.
my $read_stdin = 0;

#Save a C file.
my $save = 0;

#Translate an ATS filename to the C file.
sub ats_to_c_name {
    local($file) = ($_[0]);
    $file =~ s/\.(dats|sats)/_$1\.c/;
    return $file;
}

#Collect files and arguments
while( my $arg = shift @ARGV ) {
    if ($arg eq "-IATS") {
        $arg = shift @ARGV;
        push(@atsopt_flags, "-IATS");
        push(@atsopt_flags, $arg);
    }
    elsif ($arg eq "-I") {
        $arg = shift @ARGV;
        push(@cflags, "-I");
        push(@cflags, $arg);
    }
    elsif ($arg eq "-L") {
        $arg = shift @ARGV;
        push(@cflags, "-L");
        push(@cflags, $arg);
    }
    elsif ($arg eq "-tc") {
        $typecheck = 1;
        push(@atsopt_flags,"--typecheck");
    }
    elsif ($arg eq "-DATS") {
        $arg = shift @ARGV;
        push(@atsopt_flags, "-DATS");
        push(@atsopt_flags, $arg);
    }
    elsif ($arg =~ /^-D.*/) {
        push(@cflags, $arg);
    }
    elsif ($arg eq "-cc") {
        push(@cflags, "-c");
    }
    elsif($arg =~ /^-mmcu=.*/) {
        push(@cflags, $arg);
    }
    elsif($arg eq "-o") {
        push(@cflags, "-o");
        $arg = shift @ARGV;
        push(@cflags, $arg);
        $output_filename = $arg;
    }
    elsif($arg eq "-h") {
        $hex = 1;
    }
    elsif($arg eq "--save") {
        $save = 1;
    }
    elsif($arg eq "-") {
        $read_stdin = 1;
    }
    else {
        push(@files, $arg);
    }
}

$cmd = $ENV{'ATSHOME'}."/bin/atsopt";

unshift(@atsopt_flags, $cmd);

$avrdir = $ENV{'ATSHOME'}."/contrib/avr";

#Give Priority to the AVR contrib folder
push(@atsopt_flags, "-IATS");
push(@atsopt_flags, $avrdir);

if (!@files && !$read_stdin) {
    die "No Files given.\n";
}

#Pipes for compiling from stdin.
pipe ATSRD, ATSWR;
pipe GCCRD, GCCWR;

if($read_stdin) {
    @opts = @atsopt_flags;
    
    push(@opts, "--dynamic");
    
    print join(" ", @opts)."\n";
    
    $pid = fork();
    die "Couldn't fork" unless defined $pid;
    
    if( $pid > 0 ) {
        close(ATSRD);
        wait();
    } else {
        close(ATSWR);
        open(STDOUT, ">&GCCWR");
        exec {$opts[0] } @opts or die "Couldn't run atsopt.";
    }
    
    $success = !$?;
    
    if(!$success) {
        exit(1);
    }
}

#Run atsopt for each file
foreach $file (@files) {
    @opts = @atsopt_flags;
    
    #Need to specify output first.
    if(!$typecheck) {
        $output = ats_to_c_name($file);
        push(@opts, "--output");
        push(@opts, $output);
    }
    
    $type = ($file =~ /.*\.dats/) ? "--dynamic" : "--static";
    
    push(@opts, $type);
    push(@opts, $file);
    
    print join(" ", @opts)."\n";
    
    system( { $opts[0] } @opts ) == 0 or
        die "Compilations failed for [$file]...\n";
}

if($typecheck) {
    exit(0);
}

#Compile the C Files.
unshift(@cflags, "/usr/local/avr/bin/avr-gcc");

@extras = (
           "-O2",
           "-I",$avrdir,
           "-I",$avrdir."/runtime",
           "-L",$avrdir."/lib",
           "-D_ATS_PRELUDE_NONE","-D_ATS_HEADER_NONE",
           "-D_ATS_AVR","-lats");


if($read_stdin) {
    @opts = @cflags;
    
    push(@opts, ("-x","c","-") );
    
    push(@opts, @extras);
    
    print join(" ", @opts)."\n";
    
    $pid = fork();
    die "Couldn't fork" unless defined $pid;
    
    if( $pid > 0 ) {
        close(GCCWR);
        close(GCCRD);
        wait();
    } else {
        close(GCCWR);
        
        if($save) {
            open(CFILE, ">", $output_filename."_dats.c")
            or die ("Couldn't open output C file.");
            while($line = <GCCRD>) {
                print CFILE $line;
            }
            close(CFILE);
            open(STDIN, "<", $output_filename."_dats.c")
                or die ("Couldn't set stdin to the C file.");
        } else {
            open(STDIN,  "<&GCCRD");
        }

        exec {$opts[0]} @opts or die "Couldn't run atsopt.";
    }

    $success = !$?;
    
    if (!$success) {
        exit(1);
    }
}

foreach $file (@files) {
    @opts = @cflags;
    $cfile = ats_to_c_name($file);

    push(@opts, $cfile);

    push(@opts, @extras);
    
    print join(" ", @opts) . "\n";
    
    system ( { $opts[0] } @opts) == 0 or
        die "C Compilation Failed...\n";
    
    @objcopy = ("avr-objcopy", 
                split(" ","-O ihex $output_filename $output_filename.hex")
        );

    if($hex) {
        system ( { $objcopy[0] } @objcopy ) == 0 or
            die "Couldn't create hex file...\n";
    }
}

if($hex) {

    @objcopy = ("/usr/local/avr/bin/avr-objcopy", 
                split(" ","-O ihex $output_filename $output_filename.hex")
        );
    
    system ( { $objcopy[0] } @objcopy ) == 0 or
        die "Couldn't create hex file...\n";
}

exit(0);
